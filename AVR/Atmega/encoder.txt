/* Pin Change Interrupts ----------------------------------------------------------

ATMEGA2560 Pin Change Interrupts
Arduino              Arduino              Arduino
  Pin  PORT PCINT     Pin   PORT PCINT     Pin   PORT PCINT
  A8     PK0  16       10     PB4   4       SS     PB0   0
  A9     PK1  17       11     PB5   5       SCK    PB1   1
 A10     PK2  18       12     PB6   6       MOSI   PB2   2
 A11     PK3  19       13     PB7   7       MISO   PB3   3
 A12     PK4  20       14     PJ1  10
 A13     PK5  21       15     PJ0   9
 A14     PK6  22        0     PE0   8 - this one is a little odd. *
 A15     PK7  23
The library supports all interrupt pins, even though not all pins to the ATmega-2560 processor are exposed on the Arduino board. These pins are supported as “fake pins”, and begin with pin 70 (there are 70 pins on the ATmega 2560 board). The fake pins are as follows:

pin: fake70 PJ2 this is Pin Change Interrupt PCINT11
pin: fake71 PJ3 this is Pin Change Interrupt PCINT12
pin: fake72 PJ4 this is Pin Change Interrupt PCINT13
pin: fake73 PJ5 this is Pin Change Interrupt PCINT14
pin: fake74 PJ6 this is Pin Change Interrupt PCINT15
pin: fake75 PE6 this is External Interrupt INT6
pin: fake76 PE7 this is External Interrupt INT7
Note: Arduino Pin 0 is PE0 (PCINT8), which is RX0. Also, it is the only other pin on another port on PCI1. This would make it very costly to integrate with the library’s code and thus is not supported by this library. It is the same pin the Arduino uses to upload sketches, and it is connected to the FT232RL USB-to-Serial chip (ATmega16U2 on the R3).

 Pin Change Interrupts end-------------------------------------------------------*/

/* Quadrature encoder analysis ----------------------------------------------------

nxt motor encoder input

                           _______         _______       
               Pin1 ______|       |_______|       |______ Pin1
 negative <---         _______         _______         __      --> positive
               Pin2 __|       |_______|       |_______|   Pin2

the interrupt occurs on the rising and falling edges of the two encoder inputs
positive = (Pin1 Pin2) 01 11 10 00 01 11 10 00 01 11 10 00
negative = (Pin1 Pin2) 00 10 11 01 00 10 11 01 00 10 11 01

new	new	old	old
pin1	pin2	pin1	pin2	Result
----	----	----	----	------
0	0	0	0	no movement
0	0	0	1	+1
0	0	1	0	-1
0	0	1	1	possible interference on the encoder lines
0	1	0	0	-1
0	1	0	1	no movement
0	1	1	0	possible interference on the encoder lines
0	1	1	1	+1
1	0	0	0	+1
1	0	0	1	possible interference on the encoder lines
1	0	1	0	no movement
1	0	1	1	-1
1	1	0	0	possible interference on the encoder lines
1	1	0	1	-1
1	1	1	0	+1
1	1	1	1	no movement

oldEncoderState = 0b000000[pin1][pin2]
newEncoderState = 0b000000[pin1][pin2]

oldEncoderState XOR 	newEncoderState

new	new		old	old	decimal
pin1	pin2	XOR	pin1	pin2	xor res	Result
----	----		----	----		------
0	0	xor	0	0	0	no movement
0	0	xor	0	1	1	+1
0	0	xor	1	0	2	-1
0	0	xor	1	1	3	possible interference on the encoder lines
0	1	xor	0	0	1	-1
0	1	xor	0	1	0	no movement
0	1	xor	1	0	3	possible interference on the encoder lines
0	1	xor	1	1	2	+1
1	0	xor	0	0	2	+1
1	0	xor	0	1	3	possible interference on the encoder lines
1	0	xor	1	0	0	no movement
1	0	xor	1	1	1	-1
1	1	xor	0	0	3	possible interference on the encoder lines
1	1	xor	0	1	2	-1
1	1	xor	1	0	1	+1
1	1	xor	1	1	0	no movement

interesting groupings of the xor operation

new	new	decimal		old	old	decimal
pin1	pin2		XOR	pin1	pin2	xor res	Result
0	0	0	xor	0	1	1	+1	
0	1	1	xor	0	0	1	-1	
1	0  	2	xor	1	1	1	-1	
1	1	3	xor	1	0	1	+1	

0	0	0	xor	1	0	2	-1
0	1	1	xor	1	1	2	+1
1	0	2	xor	0	0	2	+1
1	1	3	xor	0	1	2	-1

 Quadrature encoder analysis end ------------------------------------------------*/
